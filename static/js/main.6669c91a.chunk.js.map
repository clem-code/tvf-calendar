{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","month","updateMonth","eventList","updateEventList","newEvent","updateNewEvent","handleChange","event","target","value","useEffect","april","events","index","push","console","log","aprilGen","localStorage","getItem","pushToCalendar","split","wrap","className","map","day","bg","w","p","color","id","defaultValue","length","onChange","colorScheme","onClick","indexFunc","newList","setItem","handleSubmit","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gRAwEeA,MAlEf,WAAe,MAEgBC,mBAAS,IAFzB,mBAENC,EAFM,KAECC,EAFD,OAGwBF,mBAAS,IAHjC,mBAGNG,EAHM,KAGKC,EAHL,OAIsBJ,mBAAS,IAJ/B,mBAINK,EAJM,KAIIC,EAJJ,KA4Bb,SAASC,EAAaC,GACpBF,EAAeE,EAAMC,OAAOC,OAkB9B,OAzCAC,qBAAU,WAeR,GAdA,WAGE,IAFA,IAAMC,EAAQ,GACRC,EAAS,GACNC,EAAQ,EAAGA,EAAQ,GAAIA,IAC9BF,EAAMG,KAAKD,GACXD,EAAOE,KAAK,IAEdC,QAAQC,IAAIL,GACZI,QAAQC,IAAIJ,GACZX,EAAYU,GACZR,EAAgBS,GAElBK,GAEIC,aAAaC,QAAQ,UAAW,CAClC,IACMC,EADaF,aAAaC,QAAQ,UACNE,MAAM,KACxClB,EAAgBiB,MAEjB,IAsBD,cAAC,IAAD,UACE,cAAC,IAAD,CAAME,MAAI,EAACC,UAAU,MAArB,SACGvB,EAAMwB,KAAI,SAACC,EAAKZ,GACf,OAAO,eAAC,IAAD,CAAKa,GAAIb,EAAQ,IAAM,EAAI,QAAU,SAAUc,EAAE,MAAMC,EAAG,EAAGC,MAAM,QAAnE,UACL,4CAAahB,EAAQ,KACrB,eAAC,IAAD,CAAUiB,GAAIjB,EAAOkB,aAAc7B,EAAUW,GAAOmB,OAAS,EAA1B,UAAiC9B,EAAUW,IAAW,oBAAzF,UACE,cAAC,IAAD,IACA,cAAC,IAAD,CAAeiB,GAAIjB,EAAOoB,SAAU3B,OAGtC,cAAC,IAAD,CAAQ4B,YAAY,OAAOJ,GAAIjB,EAAOsB,QAAS,SAAC5B,GAAD,OA1BzD,SAAsB6B,GACpB,IAAMC,EAAUnC,EAAUsB,KAAI,SAACjB,EAAOM,GAEpC,OAAIA,GAASuB,EACJhC,EAEAG,KAGXJ,EAAgBkC,GAEZnB,cACFA,aAAaoB,QAAQ,SAAUD,GAevBE,CAAahC,EAAMC,OAAOsB,KAD5B,mCCpDGU,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.6669c91a.chunk.js","sourcesContent":["import './App.css';\nimport React, { useState, useEffect } from 'react'\nimport {\n  ChakraProvider, Flex, Button, Box, Editable, EditableInput, EditablePreview\n} from \"@chakra-ui/react\"\n\nfunction App() {\n  //State\n  const [month, updateMonth] = useState([])\n  const [eventList, updateEventList] = useState([])\n  const [newEvent, updateNewEvent] = useState('')\n  //Generates an empty April calendar upon loading the page\n  useEffect(() => {\n    function aprilGen() {\n      const april = []\n      const events = []\n      for (let index = 1; index < 31; index++) {\n        april.push(index)\n        events.push([])\n      }\n      console.log(april)\n      console.log(events)\n      updateMonth(april)\n      updateEventList(events)\n    }\n    aprilGen()\n    //Loads saved events from local storage to the calendar\n    if (localStorage.getItem('events')) {\n      const eventSaved = localStorage.getItem('events')\n      const pushToCalendar = eventSaved.split(',')\n      updateEventList(pushToCalendar)\n    }\n  }, [])\n  //Handles the input forms on each calendar day \n  function handleChange(event) {\n    updateNewEvent(event.target.value)\n  }\n  //Handles the buttons on each calendar day\n  function handleSubmit(indexFunc) {\n    const newList = eventList.map((event, index) => {\n      //generates a new calendar list with the new event added in\n      if (index == indexFunc) {\n        return newEvent\n      } else {\n        return event\n      }\n    })\n    updateEventList(newList)\n    //adds updated calendar to local storage\n    if (localStorage) {\n      localStorage.setItem('events', newList)\n    }\n  }\n  return (\n    <ChakraProvider>\n      <Flex wrap className=\"App\">\n        {month.map((day, index) => {\n          return <Box bg={index % 2 === 0 ? \"green\" : \"yellow\"} w=\"50%\" p={8} color=\"black\">\n            <p>{`April ${index + 1}`}</p>\n            <Editable id={index} defaultValue={eventList[index].length > 0 ? `${eventList[index]}` : 'Add an event here'}>\n              <EditablePreview />\n              <EditableInput id={index} onChange={handleChange} />\n\n            </Editable>\n            <Button colorScheme=\"blue\" id={index} onClick={(event) =>\n              handleSubmit(event.target.id)}>Save Event</Button>\n          </Box>\n        })}\n      </Flex>\n    </ChakraProvider>\n  );\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}